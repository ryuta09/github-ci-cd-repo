# name: Hello                         # ワークフロー名
# on: push                            # イベント(プッシュ時に起動)
# jobs:                               # ジョブの定義
#   hello:                            # ジョブID
#     runs-on: ubuntu-latest          # ランナー(ubuntuで実行します)
#     steps:                          # ステップの定義
#       - run: echo "Hello World!"    # シェルコマンドの実行
#       - uses: actions/checkout@v4   # アクションの呼び出し$?

# name: Context
# on: push
# jobs:
#   print:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "${{ github.actor}}"


# コンテキストを直接シェルコマンドに入れるのはアンチパターンなので中間環境変数を利用することでトークン分割やパス展開が防げる
# name: Interdiate envioronment variablees
# on: push
# jobs:
#   print:
#     runs-on: ubuntu-latest
#     env:
#       ACTOR: ${{ github.actor}}
#     steps:
#       - run: echo "${ACTOR}"

# 複数のワークフローでパスワードなどの機密情報を使いたい場合はsercret.〇〇で取得可能。variantsはvars.〇〇で取得可能
# name: variablees
# on: push
# jobs:
#   print:
#     runs-on: ubuntu-latest
#     env:
#       USERNAME: "${{sercret.USERNAME}}"
#     steps:
#       - run: echo "${PASSWORD}"
#       - run: echo "${PASSWORD:0:1} ${PASSWORD}#?"



# ワークフロー名を動的に出力
# name: Hello                         # ワークフロー名
# on: push                            # イベント(プッシュ時に起動)
# run-name: Run by @${{ github.actor }} # Run by 〇〇で実行者の名前を動的に表示
# jobs:                               # ジョブの定義
#   hello:                            # ジョブID
#     runs-on: ubuntu-latest          # ランナー(ubuntuで実行します)
#     steps:                          # ステップの定義
#       - run: echo "Hello World!"    # シェルコマンドの実行
#       - uses: actions/checkout@v4   # アクションの呼び出し$?


#GitHub APIを実行するワークフロー
name: Comment
on: pull_request
jobs:
  comment:
    runs-on: ubuntu-latest
    permissions:            # GITHUB_TOKENの権限を指定
      pull-requests: write  # プルリクエストの書き込み権限を許可
      contents: read        # ソースコードの読み込みを許可
    steps:
      - uses: actions/checkout@v4
      - run: gh pr comment "${GITHUB_HEAD_REF}" --body  "Hello, ${GITHUB_ACTOR}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub CLI用のクレデンシャル